// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

import * as Lst      from "./lst.js";
import * as List     from "bs-platform/lib/es6/list.js";
import * as Option   from "./option.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";

function numberOfLive(neighbours) {
  return List.length(List.filter(function (param) {
                    return +(/* Alive */0 === param);
                  })(neighbours));
}

function underPopulationRule(cell, neighbours) {
  if (cell !== 0 || numberOfLive(neighbours) >= 2) {
    return /* Same */2;
  } else {
    return /* Dies */0;
  }
}

function livesOnRule(cell, neighbours) {
  if (cell !== 0) {
    return /* Same */2;
  } else {
    var numberOfLiveNeighbours = numberOfLive(neighbours);
    if (numberOfLiveNeighbours === 2 || numberOfLiveNeighbours === 3) {
      return /* Same */2;
    } else {
      return /* Dies */0;
    }
  }
}

function overPopulationRule(cell, neighbours) {
  if (cell !== 0 || numberOfLive(neighbours) <= 3) {
    return /* Same */2;
  } else {
    return /* Dies */0;
  }
}

function reproductionRule(cell, neighbours) {
  if (cell !== 0 && numberOfLive(neighbours) === 3) {
    return /* Revives */1;
  } else {
    return /* Same */2;
  }
}

function reduceLifeCycle(cell, neighbours) {
  var actions_000 = underPopulationRule(cell, neighbours);
  var actions_001 = /* :: */[
    livesOnRule(cell, neighbours),
    /* :: */[
      overPopulationRule(cell, neighbours),
      /* :: */[
        reproductionRule(cell, neighbours),
        /* [] */0
      ]
    ]
  ];
  var actions = /* :: */[
    actions_000,
    actions_001
  ];
  var reducedLifeCycle = Lst.head(List.filter(function (param) {
              return Caml_obj.caml_notequal(/* Same */2, param);
            })(actions));
  return Option.withDefault(/* Same */2, reducedLifeCycle);
}

function applyRules(cell, neighbours) {
  var action = reduceLifeCycle(cell, neighbours);
  switch (action) {
    case 0 : 
        return /* Dead */1;
    case 1 : 
        return /* Alive */0;
    case 2 : 
        return cell;
    
  }
}

var applyRulesTest_000 = /* tuple */[
  +(applyRules(/* Alive */0, /* :: */[
          /* Dead */1,
          /* [] */0
        ]) === /* Dead */1),
  "Underpopulation"
];

var applyRulesTest_001 = /* :: */[
  /* tuple */[
    +(applyRules(/* Alive */0, /* :: */[
            /* Alive */0,
            /* :: */[
              /* Alive */0,
              /* :: */[
                /* Dead */1,
                /* [] */0
              ]
            ]
          ]) === /* Alive */0),
    "Lives on with 2"
  ],
  /* :: */[
    /* tuple */[
      +(applyRules(/* Alive */0, /* :: */[
              /* Alive */0,
              /* :: */[
                /* Alive */0,
                /* :: */[
                  /* Alive */0,
                  /* :: */[
                    /* Alive */0,
                    /* [] */0
                  ]
                ]
              ]
            ]) === /* Dead */1),
      "Overpopulation"
    ],
    /* :: */[
      /* tuple */[
        +(applyRules(/* Dead */1, /* :: */[
                /* Alive */0,
                /* :: */[
                  /* Alive */0,
                  /* :: */[
                    /* Alive */0,
                    /* [] */0
                  ]
                ]
              ]) === /* Alive */0),
        "reproduction"
      ],
      /* :: */[
        /* tuple */[
          +(applyRules(/* Dead */1, /* :: */[
                  /* Dead */1,
                  /* :: */[
                    /* Dead */1,
                    /* :: */[
                      /* Dead */1,
                      /* :: */[
                        /* Alive */0,
                        /* :: */[
                          /* Alive */0,
                          /* :: */[
                            /* Alive */0,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]) === /* Alive */0),
          "reproduction"
        ],
        /* [] */0
      ]
    ]
  ]
];

var applyRulesTest = /* :: */[
  applyRulesTest_000,
  applyRulesTest_001
];

export {
  numberOfLive        ,
  underPopulationRule ,
  livesOnRule         ,
  overPopulationRule  ,
  reproductionRule    ,
  reduceLifeCycle     ,
  applyRules          ,
  applyRulesTest      ,
  
}
/* applyRulesTest Not a pure module */
