// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

import * as List       from "bs-platform/lib/es6/list.js";
import * as Pixi       from "./pixi.js";
import * as Block      from "bs-platform/lib/es6/block.js";
import * as Curry      from "bs-platform/lib/es6/curry.js";
import * as Option     from "./option.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";

function putSprite(stage, position, sprite) {
  Curry._2(Pixi.Container[/* addChild */0], stage, /* Sprite */Block.__(1, [sprite]));
  Curry._2(Pixi.Sprite[/* updatePosition */0], sprite, position);
  return /* () */0;
}

function backgroundStage(maybePack) {
  var backgroundStage$1 = Curry._1(Pixi.Container[/* create */1], /* () */0);
  var maybeBackground = Option.map(function (prim) {
        return new PIXI.Sprite(prim);
      }, Option.andThen(Curry._1(Pixi.Resources[/* texture */1], "background.png"), maybePack));
  if (maybeBackground) {
    console.log("rendered background??");
    putSprite(backgroundStage$1, /* tuple */[
          0,
          0
        ], maybeBackground[0]);
  } else {
    console.log("No background found");
  }
  console.log("what???");
  return backgroundStage$1;
}

var model = /* record */[
  /* renderer : None */0,
  /* textureLife : None */0,
  /* rootStage : None */0,
  /* spriteStage : None */0
];

Curry._2(Pixi.Loader[/* load */3], function (param) {
      var t = model;
      var opts = {
        antialias: /* true */1,
        transparent: /* false */0
      };
      var renderer = PIXI.autoDetectRenderer(800, 600, opts);
      var rootStage = Curry._1(Pixi.Container[/* create */1], /* () */0);
      var spriteStage = Curry._1(Pixi.Container[/* create */1], /* () */0);
      var maybePack = Curry._1(Pixi.Resources[/* create */0], "space/space.json");
      var textureLife = Option.andThen(Curry._1(Pixi.Resources[/* texture */1], "spaceship.png"), maybePack);
      document.body.appendChild(renderer.view);
      Curry._2(Pixi.Container[/* addChild */0], rootStage, /* Container */Block.__(2, [backgroundStage(maybePack)]));
      Curry._2(Pixi.Container[/* addChild */0], rootStage, /* Container */Block.__(2, [spriteStage]));
      renderer.render(rootStage);
      t[/* renderer */0] = /* Some */[renderer];
      t[/* rootStage */2] = /* Some */[rootStage];
      t[/* spriteStage */3] = /* Some */[spriteStage];
      t[/* textureLife */1] = textureLife;
      return /* () */0;
    }, Curry._2(Pixi.Loader[/* onProgress */2], function (p) {
          console.log(Pervasives.string_of_float(p));
          return /* () */0;
        }, Curry._2(Pixi.Loader[/* add */1], /* array */["space/space.json"], Pixi.Loader[/* init */0])));

function renderLife(stage, cellSize, texture, universe) {
  var renderPositionedCell = function (param) {
    var match = param[0];
    return putSprite(stage, /* tuple */[
                Caml_int32.imul(match[0], cellSize),
                Caml_int32.imul(match[1], cellSize)
              ], new PIXI.Sprite(texture));
  };
  List.map(renderPositionedCell, universe);
  return /* () */0;
}

function render(t, cellSize, universe) {
  var match = t[/* rootStage */2];
  var match$1 = t[/* spriteStage */3];
  var match$2 = t[/* textureLife */1];
  var match$3 = t[/* renderer */0];
  if (match) {
    if (match$1) {
      if (match$2) {
        if (match$3) {
          var spriteStage = match$1[0];
          Curry._1(Pixi.Container[/* clear */2], spriteStage);
          renderLife(spriteStage, cellSize, match$2[0], universe);
          return match$3[0].render(match[0]);
        } else {
          console.log("Nothing to render yet?");
          return /* () */0;
        }
      } else {
        console.log("Nothing to render yet?");
        return /* () */0;
      }
    } else {
      console.log("Nothing to render yet?");
      return /* () */0;
    }
  } else {
    console.log("Nothing to render yet?");
    return /* () */0;
  }
}

var init = model;

export {
  init   ,
  render ,
  
}
/*  Not a pure module */
