// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

import * as Pixi       from "./pixi.js";
import * as Block      from "bs-platform/lib/es6/block.js";
import * as Curry      from "bs-platform/lib/es6/curry.js";
import * as Tea_app    from "bucklescript-tea/lib/es6/src/tea_app.js";
import * as Tea_cmd    from "bucklescript-tea/lib/es6/src/tea_cmd.js";
import * as Tea_sub    from "bucklescript-tea/lib/es6/src/tea_sub.js";
import * as Tea_html   from "bucklescript-tea/lib/es6/src/tea_html.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";

function drawCircle(graphics, x, y, r) {
  graphics.lineStyle(0);
  graphics.beginFill(16776971, 0.5);
  graphics.drawCircle(x, y, r);
  return graphics.endFill();
}

function startAnimation(graphics, renderer, stage) {
  var animate = function (t, _) {
    var x = 200 * Math.sin(t) + 300;
    var y = 200 * Math.cos(t) + 300;
    graphics.clear();
    drawCircle(graphics, x, y, 60);
    renderer.render(stage);
    var partial_arg = t + 0.05;
    requestAnimationFrame(function (param) {
          return animate(partial_arg, param);
        });
    return /* () */0;
  };
  requestAnimationFrame(function (param) {
        return animate(0.0, param);
      });
  return /* () */0;
}

function map(f, a) {
  if (a) {
    return /* Some */[Curry._1(f, a[0])];
  } else {
    return /* None */0;
  }
}

var Option = /* module */[/* map */map];

function putSprite(stage, position, param) {
  if (param) {
    var s = param[0];
    Curry._2(Pixi.Container[/* addChild */0], stage, /* Sprite */Block.__(1, [s]));
    Curry._2(Pixi.Sprite[/* updatePosition */0], s, position);
    return /* () */0;
  } else {
    console.log("No valid sprite loaded");
    return /* () */0;
  }
}

function foo(loader, _) {
  var opts = {
    antialias: /* true */1,
    transparent: /* false */0
  };
  var renderer = PIXI.autoDetectRenderer(800, 600, opts);
  var stage = Curry._1(Pixi.Container[/* create */1], /* () */0);
  var graphics = new PIXI.Graphics();
  var s = renderer.view.style;
  var pack = loader.resources["space/space.json"];
  var background = map(function (prim) {
        return new PIXI.Sprite(prim);
      }, Curry._2(Pixi.Loader[/* textures */1], "background.png", pack));
  var ship = map(function (prim) {
        return new PIXI.Sprite(prim);
      }, Curry._2(Pixi.Loader[/* textures */1], "spaceship.png", pack));
  s.setProperty("border", "1px blue solid");
  renderer.view.style.border = "5px red solid";
  document.body.appendChild(renderer.view);
  Curry._2(Pixi.Container[/* addChild */0], stage, /* Graphics */Block.__(0, [graphics]));
  drawCircle(graphics, 300, 300, 60);
  startAnimation(graphics, renderer, stage);
  putSprite(stage, /* tuple */[
        0,
        0
      ], background);
  putSprite(stage, /* tuple */[
        200,
        100
      ], ship);
  return renderer.render(stage);
}

function myMain() {
  var loader = PIXI.loader;
  loader.add(/* array */["space/space.json"]).on("progress", function (lp) {
        console.log(Pervasives.string_of_float(lp.progress));
        return /* () */0;
      });
  return loader.load(function (param) {
              return foo(loader, param);
            });
}

function init() {
  return /* tuple */[
          /* record */[/* notUsedYet */42],
          Tea_cmd.none
        ];
}

function update(model, _) {
  return /* tuple */[
          model,
          Tea_cmd.none
        ];
}

function subscriptions() {
  return Tea_sub.none;
}

function view(model) {
  return Tea_html.div(/* None */0, /* None */0, /* [] */0, /* :: */[
              Tea_html.text(Pervasives.string_of_int(model[/* notUsedYet */0])),
              /* [] */0
            ]);
}

var partial_arg = /* record */[
  /* init */init,
  /* update */update,
  /* view */view,
  /* subscriptions */subscriptions
];

function main(param, param$1) {
  return Tea_app.standardProgram(partial_arg, param, param$1);
}

var nothingYet = /* NothingYet */0;

var somethingElse = /* SomethingElse */1;

export {
  drawCircle     ,
  startAnimation ,
  Option         ,
  putSprite      ,
  foo            ,
  myMain         ,
  nothingYet     ,
  somethingElse  ,
  init           ,
  update         ,
  subscriptions  ,
  view           ,
  main           ,
  
}
/* No side effect */
