// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

import * as Lst        from "./lst.js";
import * as List       from "bs-platform/lib/es6/list.js";
import * as Types      from "./types.js";
import * as Caml_obj   from "bs-platform/lib/es6/caml_obj.js";
import * as Tea_html   from "bucklescript-tea/lib/es6/src/tea_html.js";
import * as GameOfLife from "./gameOfLife.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";

function sort(positions) {
  var sorter = function (param, param$1) {
    var match = param$1[0];
    var x2 = match[0];
    var match$1 = param[0];
    var x1 = match$1[0];
    if (x1 === x2) {
      return Caml_obj.caml_compare(match$1[1], match[1]);
    } else {
      return Caml_obj.caml_compare(x1, x2);
    }
  };
  return List.sort(sorter, positions);
}

function selectRow(universe, viewPort) {
  var partial_arg = viewPort[/* yMin */1];
  return List.map(function (param) {
              return GameOfLife.findCell(universe, param);
            }, List.map(function (param) {
                  return /* tuple */[
                          partial_arg,
                          param
                        ];
                }, Lst.range(viewPort[/* xMin */0], viewPort[/* xMax */2])));
}

function viewCell(_, param) {
  var match = param[0];
  var stringCell = function (cell) {
    if (cell !== 0) {
      return "dead";
    } else {
      return "alive";
    }
  };
  return Tea_html.div(/* None */0, /* None */0, /* [] */0, /* :: */[
              Tea_html.text(Pervasives.string_of_int(match[0]) + ("," + (Pervasives.string_of_int(match[1]) + stringCell(param[1])))),
              /* [] */0
            ]);
}

function viewRow(universe, viewPort) {
  var row = selectRow(universe, viewPort);
  var cellSize = viewPort[/* cellSize */4];
  return Tea_html.div(/* None */0, /* None */0, /* [] */0, List.map(function (param) {
                  return viewCell(cellSize, param);
                }, row));
}

function playButton(label) {
  return Tea_html.div(/* None */0, /* None */0, /* :: */[
              Tea_html.onClick(/* () */0),
              /* [] */0
            ], /* :: */[
              Tea_html.text(label),
              /* [] */0
            ]);
}

function viewUniverse(viewPort, universe) {
  var rowsRange = Lst.range(viewPort[/* yMin */1], viewPort[/* yMax */3]);
  var rowViewPort = function (row) {
    return Types.newViewPort(viewPort[/* xMin */0], row, viewPort[/* xMax */2], row, viewPort[/* cellSize */4]);
  };
  var rowsViewPort = List.map(rowViewPort, rowsRange);
  var rowsHtml = List.map(function (param) {
        return viewRow(universe, param);
      }, rowsViewPort);
  return Tea_html.div(/* None */0, /* None */0, /* [] */0, rowsHtml);
}

function view(model) {
  return Tea_html.div(/* None */0, /* None */0, /* [] */0, /* :: */[
              viewUniverse(model[/* viewPort */2], model[/* universe */0]),
              /* [] */0
            ]);
}

function cellSize(_, size) {
  Pervasives.string_of_int(size) + "px";
  return /* [] */0;
}

var findCell = GameOfLife.findCell;

export {
  findCell     ,
  sort         ,
  selectRow    ,
  viewCell     ,
  viewRow      ,
  playButton   ,
  viewUniverse ,
  view         ,
  cellSize     ,
  
}
/* GameOfLife Not a pure module */
